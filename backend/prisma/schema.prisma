generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Settings {
  id              String  @id @default(cuid())
  userId          String  @unique
  fontSize        Int     @default(16)
  fontFamily      String  @default("Arial")
  lineHeight      Int     @default(3)
  backgroundColor String  @default("#111111")
  textColor       String  @default("#ffffff")
  darkMode        Boolean @default(false)
  user            User    @relation(fields: [userId], references: [id])
}

// User model
model User {
  id          String       @id @default(cuid())
  username    String       @unique
  password    String
  comment     String?
  books       Book[]
  bookshelves Bookshelve[]
  settings    Settings?
  readingSessions ReadingSession[]
  readingStreak   ReadingStreak?
  bookProgress    BookProgress[]
  readingGoals    ReadingGoal[]
  readingStats    ReadingStats?
}

model Genre {
  id    String      @id @default(cuid())
  name  String      @unique // Ensure genre names are unique
  books BookGenre[]
}

model BookGenre {
  bookId  String
  genreId String
  book    Book   @relation(fields: [bookId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@id([bookId, genreId]) // Composite key to avoid duplicate relations
}

// Book model
model Book {
  id             String                 @id @default(cuid())
  title          String
  description    String
  author         String
  genres         BookGenre[]
  bookshelves    Bookshelve[]
  imageUrl       String
  liked          Boolean
  dateAdded      DateTime
  scale          Float
  offsetPosition OffsetPosition?
  userId         String
  user           User                   @relation(fields: [userId], references: [id])
  bookElements   ProcessedElement[]
  highlights     Highlight[]
  canvaElements  CanvaElementSkeleton[]
  curveElements  CurveElementSkeleton[]
  chaptersData   ChaptersData[]
  readingSessions ReadingSession[]
  bookProgress    BookProgress[]
}

// Bookshelve model
model Bookshelve {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  books     Book[]
}

// ProcessedElement model
model ProcessedElement {
  id        String @id @default(cuid())
  elementId String
  text      String
  lineX     Float
  lineWidth Float
  lineY     Float
  bookId    String
  book      Book   @relation(fields: [bookId], references: [id])
}

// Highlight model
model Highlight {
  id        String @id @default(cuid())
  startingX Float
  startingY Float
  endX      Float
  endY      Float
  bookId    String
  book      Book   @relation(fields: [bookId], references: [id])
}

// OffsetPosition model
model OffsetPosition {
  id     String @id @default(cuid())
  x      Float
  y      Float
  bookId String @unique // Ensures one-to-one relation
  book   Book   @relation(fields: [bookId], references: [id])
}

// ChaptersData model
model ChaptersData {
  id          String  @id @default(cuid())
  elementId   String
  title       String
  href        String?
  indentLevel Int?
  bookId      String
  book        Book    @relation(fields: [bookId], references: [id])
}

model Point {
  id      String                @id @default(cuid())
  x       Float
  y       Float
  curveId String?
  canvaId String?
  curve   CurveElementSkeleton? @relation(fields: [curveId], references: [id])
  canva   CanvaElementSkeleton? @relation(fields: [canvaId], references: [id])

  @@index([curveId])
  @@index([canvaId])
}

model CanvaElementSkeleton {
  id             String         @id @default(cuid())
  fill           String
  x              Float
  y              Float
  width          Float
  height         Float
  strokeColor    String
  strokeWidth    Float
  opacity        Float
  rotation       Float
  type           String
  points         Point[] // We'll discuss points later
  outgoingArrows ArrowElement[] @relation("OutgoingArrows")
  incomingArrows ArrowElement[] @relation("IncomingArrows")

  outgoingArrowIds String[] // List of outgoing arrow IDs
  incomingArrowIds String[] // List of incoming arrow IDs

  bookId        String
  book          Book           @relation(fields: [bookId], references: [id])
  circleElement CircleElement?
  rectElement   RectElement?
  textElement   TextElement?
}

// CurveElementSkeleton model
model CurveElementSkeleton {
  id            String         @id @default(cuid())
  points        Point[]
  fill          String
  text          String?
  roughness     Float
  bowing        Float
  seed          Float
  strokeWidth   Float
  strokeStyle   String
  stroke        String
  fillStyle     String
  fillWeight    Float
  hachureAngle  Float
  hachureGap    Float
  type          String
  bookId        String
  book          Book           @relation(fields: [bookId], references: [id])
  arrowElements ArrowElement[]
}

model ArrowElement {
  id        String                @id @default(cuid())
  startId   String? // Optional start element
  endId     String? // Optional end element
  type      String
  startType String?
  endType   String?
  from      CanvaElementSkeleton  @relation("OutgoingArrows", fields: [fromId], references: [id])
  to        CanvaElementSkeleton  @relation("IncomingArrows", fields: [toId], references: [id])
  fromId    String
  toId      String
  curveId   String?
  curve     CurveElementSkeleton? @relation(fields: [curveId], references: [id])
}

// CircleElement model
model CircleElement {
  id           String               @id @default(cuid())
  fillStyle    String
  roughness    Float
  seed         Float
  hachureGap   Float
  hachureAngle Float
  radius       Float
  type         String
  canvaId      String               @unique
  canva        CanvaElementSkeleton @relation(fields: [canvaId], references: [id])
}

// RectElement model
model RectElement {
  id           String               @id @default(cuid())
  fillStyle    String
  roughness    Float
  seed         Float
  hachureGap   Float
  hachureAngle Float
  type         String
  canvaId      String               @unique
  canva        CanvaElementSkeleton @relation(fields: [canvaId], references: [id])
}

// TextElement model
model TextElement {
  id         String               @id @default(cuid())
  text       String
  fontFamily String
  fontSize   Float
  type       String
  canvaId    String               @unique
  canva      CanvaElementSkeleton @relation(fields: [canvaId], references: [id])
}

// Track individual reading sessions
model ReadingSession {
  id           String   @id @default(cuid())
  userId       String
  bookId       String
  startTime    DateTime
  endTime      DateTime?
  duration     Int?     // Duration in seconds, calculated on session end
  pagesRead    Int?     // Number of pages/screens read in this session
  lastPosition Float?   // Last position in the book (percentage or page number)
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id])
  book         Book     @relation(fields: [bookId], references: [id])
  
  @@index([userId])
  @@index([bookId])
}

// Track reading streaks
model ReadingStreak {
  id             String   @id @default(cuid())
  userId         String   @unique
  currentStreak  Int      @default(0)
  longestStreak  Int      @default(0)
  lastReadDate   DateTime?
  totalReadDays  Int      @default(0)
  
  user           User     @relation(fields: [userId], references: [id])
}

// Track progress for each book
model BookProgress {
  id               String    @id @default(cuid())
  userId           String
  bookId           String
  percentComplete  Float     @default(0)
  currentPage      Int       @default(0)
  totalPages       Int       @default(0)
  isCompleted      Boolean   @default(false)
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  lastReadAt       DateTime?
  timeSpentReading Int       @default(0)  // Total time in seconds
  
  user             User      @relation(fields: [userId], references: [id])
  book             Book      @relation(fields: [bookId], references: [id])
  
  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
}

// Track reading goals
model ReadingGoal {
  id               String    @id @default(cuid())
  userId           String
  goalType         String    // "daily", "weekly", "monthly", "yearly", "books"
  targetValue      Int       // Minutes per day, books per year, etc.
  currentValue     Int       @default(0)
  startDate        DateTime  @default(now())
  endDate          DateTime?
  isCompleted      Boolean   @default(false)
  
  user             User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

// Track reading statistics
model ReadingStats {
  id                  String   @id @default(cuid())
  userId              String   @unique
  totalBooksRead      Int      @default(0)
  totalPagesRead      Int      @default(0)
  totalReadingTime    Int      @default(0)  // In seconds
  averageReadingSpeed Float?   // Pages per hour
  favoriteGenre       String?
  lastUpdated         DateTime @default(now())
  
  user                User     @relation(fields: [userId], references: [id])
}
